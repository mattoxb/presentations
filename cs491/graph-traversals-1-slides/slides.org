#+TITLE: Graph Traversals, Part 1
#+SUBTITLE: The Basics of DFS and BFS
#+options: h:2
#+date: Fall, 2022
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [aspectration=169,xcolor={x11names},presentation]
#+LATEX_HEADER: \input{slides-header.tex}
#+LATEX_HEADER: \pgfdeclarelayer{background}
#+LATEX_HEADER: \pgfsetlayers{background,main}

* Introduction
** Objectives

  - Implement DFS and BFS
  - Show how to use these to solve some classic graph problems:
    - connected components
    - flood fill

* Depth First Search
** DFS Basics

  - Step 1: Mark self as visited
  - Step 2: Visit all unvisited children
  - Step 3: ???
  - Step 4: Profit!

** Example

- Here's our happy tree from last time.

#+BEGIN_EXPORT latex
\begin{center}
  \begin{tikzpicture}[scale=1.5]
    \tikzstyle{bun} = [draw=blue!90,fill=blue!10,circle,minimum size=20pt]
    \tikzstyle{sbun} = [draw=blue!90,fill=blue!30,circle,minimum size=23pt]
    \tikzstyle{edge} = [draw=blue!90,thick,-]
    \tikzstyle{seledge} = [draw=blue!50,line width=5pt,-]
    \tikzstyle{ignedge} = [draw=black!10,line width=5pt,-]
    \foreach \pos/\name in
    {{(0,1)/a},
      {(0,3)/b},
      {(2,0)/c},
      {(2,2)/d},
      {(2,4)/e},
      {(4,1)/f},
      {(4,3)/g}}
    \node[bun] (\name) at \pos {$\name$};
    \foreach \src/\dst/\w in {a/b/2,a/c/4,e/d/4,e/g/2,g/d/4,f/d/12,b/c/3}
    \path[edge] (\src) -- node[auto] {\w} (\dst);
    \begin{pgfonlayer}{background}
      \pause
      \node[sbun] (sa) at (a) {a};

      \foreach \src/\dst in {{a/b},
                             {b/c},
                             {c/a},
                             {d/e},
                             {e/g},
                             {g/d},
                             {d/f}} {
%        {b/d/5/seledge}} {
        \pause
        \node[sbun] (s\dst) at (\dst) {};
        \path[seledge] (\src) -- node[auto] {} (\dst) ;
      };
    \end{pgfonlayer}
  \end{tikzpicture}
  \end{center}
  #+END_EXPORT

** DFS Code
- Converted to more modern C++ from the book.

#+begin_src c++ -n
typedef pair<int, int> ii;
typedef vector<ii> vii; // edge is (neighbor, weight) pair
typedef vector<int> vi;

vi dfs_num;

void dfs(int u) {
  // we mark the vertex as visited
  dfs_num[u] = VISITED; // == 1,  UNVISITED == -1
  for (auto v = AdjList[u].begin();
       v != AdjList[u].edu(); ++v) {
    if (dfs_num[v->first] == UNVISITED)
       dfs(v->first);
} }
#+end_src

* Breadth First Search
** BFS Basics

  - Step 1: Mark self as visited
  - Step 2: Enqueue all unvisited children
  - Step 3: Dequeue next child and visit
  - Step 4: ???
  - Step 5: Profit!

** Example

#+BEGIN_EXPORT latex
\begin{center}
  \begin{tikzpicture}[scale=1.5]
    \tikzstyle{bun} = [draw=blue!90,fill=blue!10,circle,minimum size=20pt]
    \tikzstyle{sbun} = [draw=blue!90,fill=blue!30,circle,minimum size=23pt]
    \tikzstyle{edge} = [draw=blue!90,thick,-]
    \tikzstyle{seledge} = [draw=blue!50,line width=5pt,-]
    \tikzstyle{ignedge} = [draw=black!10,line width=5pt,-]
    \foreach \pos/\name in
    {{(0,1)/a},
      {(0,3)/b},
      {(2,0)/c},
      {(2,2)/d},
      {(2,4)/e},
      {(4,1)/f},
      {(4,3)/g}}
    \node[bun] (\name) at \pos {$\name$};
    \foreach \src/\dst/\w in {a/b/2,a/c/4,a/d/10,b/d/5,b/e/6,e/d/4,e/g/2,g/d/4,g/f/3,f/d/12,f/c/7,c/d/8}
    \path[edge] (\src) -- node[auto] {\w} (\dst);
    \begin{pgfonlayer}{background}
      \pause
      \node[sbun] (sf) at (f) {f};

      \foreach \src/\dst in {{f/g},
                             {f/d},
                             {f/c},
                             {g/e},
                             {d/b},
                             {d/a}} {
%        {b/d/5/seledge}} {
        \pause
        \node[sbun] (s\dst) at (\dst) {};
        \path[seledge] (\src) -- node[auto] {} (\dst) ;
      };
    \end{pgfonlayer}
  \end{tikzpicture}
  \end{center}
  #+END_EXPORT

** BFS Code

#+begin_src c++ -n
vi d(V, INF); d[s] = 0;  // initialize source distance
queue<int> q; q.push(s); // start from source
while (!q.empty()) {
  int u = q.front(); q.pop();
  for (auto v = AdjList[u].begin();
       v !+ AdjList[u].end();
       ++j) {
    if (d[v->first] == INF) {
      d[v->first] = d[u] + 1;
      q.push(v->first);
} } }
#+end_src

* Applications

** Connected Components

- You can use DFS to determine the number of connected components.
- Loop through the vertices; if you encounter an unvisited one, increment the CC count.

  #+begin_src c++ -n
numCC = 0;
dfs_num.assign(V, UNVISITED);
for (int i = 0; i < V; i++)
   if (dfs_num[i] == UNVISITED) {
      printf("CC %d:", ++numCC);
      dfs(i);
      printf("\n");
    }
  #+end_src

** Flood Fill

- This is a special case of DFS.

  #+begin_src c++ -n
int dr[] = {1,1,0,-1,-1,-1, 0, 1};
int dc[] = {0,1,1, 1, 0,-1,-1,-1};

int floodfill(int r, int c, char c1, char c2) {
  if (r < 0 || r >= R || c < 0 || c >= C) return 0;
  if (grid[r][c] != c1) return 0;
  int ans = 1;
  grid[r][c] = c2;
  for (int d = 0; d < 8; d++)
      ans += floodfill(r + dr[d], c + dc[d], c1, c2);
  return ans;
}
  #+end_src

* End :noexport:
;; Local Variables:
;; org-latex-listings: minted
;; eval: (add-hook 'after-save-hook  #'org-beamer-export-to-latex nil t)
;; End:
